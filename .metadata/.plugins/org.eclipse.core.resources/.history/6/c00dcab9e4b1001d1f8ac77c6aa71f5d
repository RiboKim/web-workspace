package kr.or.iei.board.model.service;

import java.sql.Connection;
import java.util.ArrayList;

import common.JDBCTemplate;
import kr.or.iei.board.model.dao.BoardDao;
import kr.or.iei.board.model.vo.Board;
import kr.or.iei.board.model.vo.BoardPageData;
import kr.or.iei.board.model.vo.BoardViewData;
import kr.or.iei.notice.model.vo.Notice;
import kr.or.iei.notice.model.vo.NoticePageData;

public class BoardService {
	private BoardDao dao;

	public BoardService() {
		super();
		dao = new BoardDao();
	}

	public int insertBoard(Board b) {
		Connection conn = JDBCTemplate.getConnection();
		int result = dao.insertBoard(conn, b);
		if(result>0) {
			JDBCTemplate.commit(conn);
		}else {
			JDBCTemplate.rollback(conn);
		}
		JDBCTemplate.close(conn);
		return result;
	}
	public BoardPageData selectBoardList(int reqPage) {
		Connection conn = JDBCTemplate.getConnection();
		//1.한 페이지당 게시물 수 지정 -> 페이지당 10개
		int numPerPage = 10;
		//요청페이지가 1페이지면 -> 최신글 1~10(정렬된거 기준으로 봤을 때)
		//reqPage가 2페이지면 -> 최신글 11~20번
		//reqPage가 3페이지면 -> 최신글 21~30qjs
		//reqPage == 4 -> 31~40
		int end = numPerPage*reqPage;
		int start = end - numPerPage + 1;
		
		ArrayList<Board> list = dao.selectBoardList(conn,start,end);
		//페이징제작 시작
		//전체페이지 수를 계산 -> 총 게시물 수를 조회
		int totalCount = dao.selectBoardCount(conn);
		//전체 페이지 수 계산
		int totalPage = 0;
		if(totalCount%numPerPage == 0) {
			totalPage = totalCount/numPerPage;
		}else {
			totalPage = totalCount/numPerPage+1;
		}
		//네비게이션 사이즈
		int pageNaviSize = 5;
		
		//페이지네비게이션 시작번호
		//reqPage 1~5 : 1 2 3 4 5 = 1
		//reqPage 6~10 : 6 7 8 9 10 = 2
		//reqPage 11~15 : 11 12 13 14 15 = 3
		
		int pageNo = ((reqPage-1)/pageNaviSize)*pageNaviSize + 1;
		
		//페이지 네비게이션 제작 시작
		String pageNavi = "<ul class='pagination circle-style'>";
		//이전버튼
		if(pageNo != 1) {
			pageNavi += "<li>";
			pageNavi += "<a class='page-item' href='/noticeList.do?requestPage="+(pageNo-1)+"'>";
			pageNavi += "<span class='material-icons'>chevron_left</span>";
			pageNavi += "</a></li>";
		}
		
		//페이지 숫자
		for(int i=0;i<pageNaviSize;i++) {
			if(pageNo == reqPage){
				pageNavi += "<li>";
				pageNavi += "<a class='page-item active-page' href='/noticeList.do?requestPage="+(pageNo)+"'>";
				pageNavi += pageNo;
				pageNavi += "</a></li>";
			}else {
				pageNavi += "<li>";
				pageNavi += "<a class='page-item' href='/noticeList.do?requestPage="+(pageNo)+"'>";
				pageNavi += pageNo;
				pageNavi += "</a></li>";
			}
			pageNo++;
			if(pageNo>totalPage) {
				break;
				}
			}
		//다음버튼
		if(pageNo <= totalPage) {
			pageNavi += "<li>";
			pageNavi += "<a class='page-item' href='/noticeList.do?requestPage="+(pageNo)+"'>";
			pageNavi += "<span class='material-icons'>chevron_right</span>";
			pageNavi += "</a></li>";
		}
		pageNavi+= "</ul>";
		
		JDBCTemplate.close(conn);
		BoardPageData bpd = new BoardPageData(list, pageNavi, start);
		
		return bpd;
	}
	public BoardViewData selectOneBoard(int boardNo) {
		Connection conn = JDBCTemplate.getConnection();
		//커넥션 닫기 전에 조회수 상승
		int result = dao.updateReadCount(conn,boardNo);
		if(result>0) {
			JDBCTemplate.commit(conn);
			Board b = dao.selectOneBoard(conn,boardNo);
			//1.일반댓글조회
			//2.대댓글조회
			
			BoardViewData bvd = new BoardViewData(b);
			JDBCTemplate.close(conn);
			return bvd;
			
		}else {
			JDBCTemplate.rollback(conn);
			JDBCTemplate.close(conn);
			return null;
		}
	}
	public Board getBoard(int boardNo) {
		Connection conn = JDBCTemplate.getConnection();
		Board b = dao.selectOneBoard(conn, boardNo);
		JDBCTemplate.close(conn);
		return b;
	}
	
	
}
